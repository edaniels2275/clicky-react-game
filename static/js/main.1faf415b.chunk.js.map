{"version":3,"sources":["components/FriendCard/index.js","components/Wrapper/index.js","components/Navbar/index.js","App.js","index.js"],"names":["FriendCard","props","className","onClick","shuffleArray","name","alt","src","image","Wrapper","children","styles","navbarStyle","background","justifyContent","width","Navbar","style","score","highScore","message","App","state","cards","alreadyClickedNames","charName","console","log","setState","sort","Math","random","includes","newHighScore","gameOver","push","this","map","card","id","key","Component","ReactDOM","render","document","getElementById"],"mappings":"0lEAaeA,MAVf,SAAoBC,GAClB,OACE,yBAAKC,UAAU,OAAOC,QAAS,kBAAMF,EAAMG,aAAaH,EAAMI,QAC5D,yBAAKH,UAAU,iBACb,yBAAKI,IAAKL,EAAMI,KAAME,IAAKN,EAAMO,W,MCA1BC,MAJf,SAAiBR,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMS,WCMnCC,G,MAAS,CACbC,YAAa,CACXC,WAAY,UACZC,eAAgB,SAChBC,MAAO,UAgBIC,MAVf,SAAgBf,GACd,OACE,yBAAKgB,MAAON,EAAOC,YAAaV,UAAU,UACxC,0BAAMA,UAAU,eACd,uCAAaD,EAAMiB,MAAnB,IAA0B,qCAA1B,eAAuDjB,EAAMkB,UAA7D,IAAwE,qCAAxE,IAA0FlB,EAAMmB,Y,OCkDzFC,E,2MAlEbC,MAAQ,CACNC,QACAL,MAAO,EACPC,UAAW,EACXK,oBAAqB,GACrBJ,QAAS,I,EAKXhB,aAAe,SAACqB,GAEdC,QAAQC,IAAIF,GACZC,QAAQC,IAAIJ,GACZ,IAAIC,EAAsB,EAAKF,MAAME,oBAQrC,OANA,EAAKI,SAAS,CAAEL,QAAOC,wBAGvBD,EAAMM,MAAK,kBAAMC,KAAKC,SAAW,MAG9BP,EAAoBQ,SAASP,IAC9B,EAAKQ,oBACL,EAAKC,aAGLV,EAAoBW,KAAKV,GACzBC,QAAQC,IAAIH,QACZ,EAAKI,SAAS,CAACV,MAAO,EAAKI,MAAMJ,MAAQ,EAAGE,QAAS,O,EAKvDa,aAAe,WACV,EAAKX,MAAMJ,MAAQ,EAAKI,MAAMH,YAC/B,EAAKS,SAAS,CAACT,UAAW,EAAKG,MAAMJ,QACrCQ,QAAQC,IAAI,EAAKL,MAAMH,a,EAI3Be,SAAW,WACT,EAAKN,SAAS,CAAEJ,oBAAqB,GAAIN,MAAO,EAAGE,QAAS,e,wEAItD,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAQF,MAAOkB,KAAKd,MAAMJ,MACxBC,UAAWiB,KAAKd,MAAMH,UACtBC,QAASgB,KAAKd,MAAMF,UACrBgB,KAAKd,MAAMC,MAAMc,KAAI,SAAAC,GAAI,OACxB,kBAAC,EAAD,CACElC,aAAc,EAAKA,aACnBmC,GAAID,EAAKC,GACTC,IAAKF,EAAKC,GACVlC,KAAMiC,EAAKjC,KACXG,MAAO8B,EAAK9B,gB,GA5DNiC,a,MCDlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.1faf415b.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction FriendCard(props) {\n  return (\n    <div className=\"card\" onClick={() => props.shuffleArray(props.name)}>\n      <div className=\"img-container\">\n        <img alt={props.name} src={props.image} />\n      </div>\n    </div>\n  );\n}\n\nexport default FriendCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n// By importing the Navbar.css file, it is added to the DOM whenever this component loads\r\n\r\n// We can also style a component inside of its JavaScript file by adding style properties to its rendered elements\r\n// Unlike regular HTML, a JSX style property must be an object instead of a string\r\n// On a style object, we camelCase all property names, and put all of the values in quotes\r\n// Non quoted values default to \"pixels\", e.g. height, margin, padding\r\n\r\nconst styles = {\r\n  navbarStyle: {\r\n    background: \"#6CADDC\",\r\n    justifyContent: \"center\",\r\n    width: \"100%\"\r\n   }\r\n};\r\n\r\n// We use JSX curly braces to evaluate the style object on the JSX tag\r\n\r\nfunction Navbar(props) {\r\n  return (\r\n    <nav style={styles.navbarStyle} className=\"navbar\">\r\n      <span className=\"navbar-text\">\r\n        <h3> Score: {props.score} <span> | </span>High Score: {props.highScore} <span> | </span> {props.message}</h3>\r\n      </span>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Navbar from \"./components/Navbar\";\nimport cards from \"./cards.json\";\n\nclass App extends Component {\n  // Setting this.state.cards to the cards json array\n  state = {\n    cards,\n    score: 0,\n    highScore: 0,\n    alreadyClickedNames: [],\n    message: \"\"\n  };\n\n  //array that randomly shuffles the cards, takes name\n  //of each character as a parameter sent from FriendCard component.\n  shuffleArray = (charName) => {\n\n    console.log(charName);\n    console.log(cards);\n    let alreadyClickedNames = this.state.alreadyClickedNames;\n\n    this.setState({ cards, alreadyClickedNames});\n\n    //shuffles array\n    cards.sort(() => Math.random() - 0.5);\n\n\n    if(alreadyClickedNames.includes(charName)){\n      this.newHighScore();\n      this.gameOver();\n      return;\n    }else{\n      alreadyClickedNames.push(charName)\n      console.log(alreadyClickedNames)\n      this.setState({score: this.state.score + 1, message: \"\"});\n      return;\n    }\n    };\n\n    newHighScore = () => {\n      if(this.state.score > this.state.highScore){\n        this.setState({highScore: this.state.score})\n        console.log(this.state.highScore);\n      }\n    }\n\n    gameOver = () => {\n      this.setState({ alreadyClickedNames: [], score: 0, message: \"Game Over\"});\n    }\n\n  // Map over this.state.cards and render a friendCard component for each card object\n  render() {\n    return (\n      <Wrapper>\n        <Navbar score={this.state.score}\n          highScore={this.state.highScore}\n          message={this.state.message}/>\n        {this.state.cards.map(card => (\n          <FriendCard\n            shuffleArray={this.shuffleArray}\n            id={card.id}\n            key={card.id}\n            name={card.name}\n            image={card.image}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}